//:: case MonotonicBool
//:: tool silicon
//:: verdict Pass

// fails due to https://github.com/viperproject/silicon/issues/512
//:: suite problem-fail

// This file contains an attempt at constructing and verifying a monotonic bool.
// It would seem that it is truly a monotonic bool, since if one of
// the threads write false to b the program does not verify.
// However, approach is unfortunately not correct; see monotonicBoolBroken.pvl in the same folder for details.

// This test uses its own toSeq function, but use of the built-in \values(xs, 0, n) is desired.
// Unfortunately, on viper 20.01 \values doesn't work properly because \values uses read permissions.
// (When this file is verified with viper master, as of 2020-08-26, it verifies)
// When viper is upgraded to the version after 20.07, this test can be refactored to use \values.
// Also: the foldOr should probably also be a builtin or something

class C {
  boolean b;
  boolean[] contrib;

  // Method that might return true or false. Useful for setting the bool "sometimes"
  boolean p(int tid);

  requires xs != null;
  requires i >= 0;
  requires (\forall* int j = 0..xs.length; Perm(xs[j], read));
  ensures i < xs.length ==> |\result| == (xs.length - i);
  ensures i < xs.length ==> 
    (\forall int j = i..xs.length; \result[j-i] == xs[j]);
  ensures i >= xs.length ==> |\result| == 0;
  seq<boolean> toSeqImpl(boolean[] xs, int i) =
    i < xs.length 
      ? seq<boolean>{ xs[i] } + toSeqImpl(xs, i + 1)
      : seq<boolean>{};

  requires xs != null;
  requires (\forall* int i = 0..xs.length; Perm(xs[i], read));
  ensures |\result| == xs.length;
  ensures (\forall int i = 0..xs.length; \result[i] == xs[i]);
  seq<boolean> toSeq(boolean[] xs) = toSeqImpl(xs, 0);

  ensures \result == (\exists int i = 0..|xs|; xs[i]);
  boolean foldOr(seq<boolean> xs) =
    |xs| > 0 
      ? head(xs) || foldOr(tail(xs))
      : false;

  requires Perm(contrib, write);
  requires Perm(b, write);
  requires N > 0;
  void foo(int N) {
    b = false;
    contrib = new boolean[N];
    assert b == foldOr(toSeq(contrib));

    assert Perm(contrib, read);
    assert (\forall* int i = 0..N; Perm(contrib, read));

    invariant inv(Perm(contrib, read) 
        ** contrib.length == N
        ** (\forall* int i = 0..N; Perm(contrib[i], 1\2))
        ** Perm(b, write)
        ** b == foldOr(toSeq(contrib))
        ) {
      par(int tid = 0..N)
        context N > 0;
        context Perm(contrib, read) ** contrib != null;
        context Perm(contrib[tid], 1\2);
      {
        if (p(tid)) {
          // Models: atomic_set(b);
          atomic(inv) {
            b = true;
            contrib[tid] = true;
            // Fails:
            // b = false;
            // contrib[tid] = false;
          }
        }
      }
    }

    assert b == (\exists int i = 0..N; contrib[i]);
  }
}
